{"version":3,"sources":["../../src/components/Picker.tsx"],"names":["isEmptyOrNil","Utilities","PickerIcon","props","color","pickerStyle","APP_CONSTANTS","IS_ANDROID","position","right","Metrics","smallMargin","Fonts","size","tiny","extraSmall","PICKER_THEME","fonts","medium","fontFamily","TTCommons","regular","roundness","baseMargin","Picker","React","useState","pickerColor","Colors","newDimGrey","text","newCharcoalDarkGrey","icon","charcoalLightGrey","colors","setColors","textInputRef","useRef","placeholderText","value","errorMessage","pickerMode","customErrorContainerStyle","customInputStyle","onValueChange","onDonePress","onOpenHandler","items","testId","RenderCustomIcon","pickerIOSContainer","pickerAndroidContainer","hidePlaceholder","label","textProps","textInputContainerStyle","isDisabled","pickerStateColor","newDisabled","error","textColor","disabledText","iconColor","pickerMarginTop","doubleBaseMargin","onOpenSelect","current","handleFocus","newBlue","Keyboard","dismiss","onCloseSelect","handleBlur","PickerOSSpecificProps","pickerProps","onFocus","onBlur","dropdownIconColor","dropdownIconRippleColor","onClose","onOpen","RenderPickerSelect","placeholder","iconContainer","justifyContent","height","marginRight","inputIOS","fontSize","paddingHorizontal","textAlignVertical","black","width","paddingRight","inputAndroid","marginLeft","inputIOSContainer","marginTop","inputAndroidContainer","length","maxFontSizeMultiplier","backgroundColor","white","primary","blue","disabled"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Keyboard, StyleProp, View } from 'react-native';\nimport RNPickerSelect from 'react-native-picker-select';\nimport { If, Then } from 'react-if';\nimport Icon from 'react-native-vector-icons/AntDesign';\n\nimport { APP_CONSTANTS, Colors, Fonts, Metrics, Utilities } from '../commons';\nimport { AppText } from './AppText';\nimport { PickerProps } from './types';\nimport { TextInput } from 'react-native-paper';\n\nconst { isEmptyOrNil } = Utilities;\n\nexport const PickerIcon: React.FC<{ color: string }> = props => {\n  const { color } = props;\n  const pickerStyle: StyleProp<any> = APP_CONSTANTS.IS_ANDROID\n    ? {\n        position: 'absolute',\n        right: Metrics.smallMargin,\n        color: color,\n      }\n    : { color: color, right: 2 };\n\n  return <Icon name=\"caretdown\" style={pickerStyle} size={APP_CONSTANTS.IS_ANDROID ? Fonts.size.tiny : Fonts.size.extraSmall} color={color} />;\n};\n\nexport const PICKER_THEME = {\n  fonts: {\n    medium: {\n      fontFamily: Fonts.TTCommons.regular,\n    },\n  },\n  roundness: Metrics.baseMargin,\n};\n\nexport const Picker = (props: PickerProps) => {\n  const [colors, setColors] = React.useState({ pickerColor: Colors.newDimGrey, text: Colors.newCharcoalDarkGrey, icon: Colors.charcoalLightGrey });\n\n  const textInputRef = React.useRef<any>(null);\n  const {\n    placeholderText,\n    value,\n    errorMessage = '',\n    pickerMode = 'outlined',\n    customErrorContainerStyle = {},\n    customInputStyle = {},\n    onValueChange,\n    onDonePress,\n    onOpenHandler = () => {},\n    items,\n    testId = '',\n    RenderCustomIcon,\n    pickerIOSContainer = {},\n    pickerAndroidContainer = {},\n    hidePlaceholder = false,\n    label = '',\n    textProps = {},\n    textInputContainerStyle = {},\n  } = props;\n\n  const isDisabled = isEmptyOrNil(items);\n  // sets the color for the drop down\n  const pickerStateColor = isDisabled ? Colors.newDisabled : isEmptyOrNil(errorMessage) ? colors.pickerColor : Colors.error;\n  const textColor = isDisabled ? Colors.disabledText : !isEmptyOrNil(errorMessage) && isEmptyOrNil(value) ? Colors.error : !APP_CONSTANTS.IS_ANDROID ? (isEmptyOrNil(value) ? Colors.newDimGrey : colors.text) : colors.text;\n  const iconColor = isDisabled ? Colors.disabledText : colors.icon;\n  const pickerMarginTop = pickerMode === 'flat' ? Metrics.doubleBaseMargin : 3;\n\n  const onOpenSelect = () => {\n    textInputRef.current.handleFocus();\n    setColors({ ...colors, pickerColor: Colors.newBlue, icon: Colors.newBlue });\n    if (!APP_CONSTANTS.IS_ANDROID) {\n      onOpenHandler();\n    } else {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onCloseSelect = () => {\n    textInputRef.current.handleBlur();\n    setColors({ ...colors, pickerColor: Colors.newDimGrey, icon: Colors.charcoalLightGrey });\n  };\n\n  // Specifically used for different platforms (IOS and Android)\n  const PickerOSSpecificProps = APP_CONSTANTS.IS_ANDROID\n    ? {\n        pickerProps: {\n          onFocus: () => onOpenSelect(),\n          onBlur: () => onCloseSelect(),\n          dropdownIconColor: '#ffffff',\n          dropdownIconRippleColor: '#ffffff',\n        },\n      }\n    : {\n        onClose: () => onCloseSelect(),\n        onOpen: () => onOpenSelect(),\n      };\n\n  // const onUpdownArrowSelect = (key?) => {\n  //   const picker = pickerRef.current;\n  //   const pickerItems = picker.state.items;\n  //   const pickerSelectedValue = picker.state.selectedItem.value;\n  //   const pickerSelectedValueIndex = findIndex(propEq('value', pickerSelectedValue), pickerItems);\n  //   if (key === 'up') {\n  //     if (pickerSelectedValueIndex > 0) picker.onValueChange(pickerItems[pickerSelectedValueIndex - 1].value, pickerSelectedValueIndex - 1);\n  //     if (pickerSelectedValueIndex === 0) picker.onValueChange(pickerItems[pickerItems.length - 1].value, pickerItems.length - 1);\n  //   } else {\n  //     if (pickerSelectedValueIndex + 1 < pickerItems.length) picker.onValueChange(pickerItems[pickerSelectedValueIndex + 1].value, pickerSelectedValueIndex + 1);\n  //     if (pickerSelectedValueIndex + 1 === pickerItems.length) picker.onValueChange(pickerItems[0].value, 0);\n  //   }\n  // };\n\n  const RenderPickerSelect = () => (\n    <RNPickerSelect\n      style={{\n        placeholder: {\n          color: isEmptyOrNil(errorMessage) ? pickerStateColor : Colors.error,\n        },\n        iconContainer: {\n          justifyContent: 'center',\n          height: '100%',\n          marginRight: 15,\n        },\n        inputIOS: {\n          fontSize: 16,\n          height: 56,\n          paddingHorizontal: 14,\n          textAlignVertical: 'center',\n          color: Colors.black,\n          width: '100%',\n          paddingRight: 30, // to ensure the text is never behind the icon\n        },\n        inputAndroid: {\n          fontSize: 16,\n          height: 56,\n          paddingHorizontal: 14,\n          color: Colors.black,\n          textAlignVertical: 'center',\n          width: '100%',\n          paddingRight: 30, // to ensure the text is never behind the icon\n          marginLeft: 5,\n        },\n        inputIOSContainer: {\n          marginTop: pickerMarginTop,\n          height: 50,\n          ...pickerIOSContainer,\n        },\n        inputAndroidContainer: {\n          marginTop: pickerMarginTop,\n          height: 50,\n          ...pickerAndroidContainer,\n        },\n      }}\n      placeholder={\n        hidePlaceholder\n          ? {}\n          : {\n              label: `${placeholderText}`,\n              value: null,\n            }\n      }\n      key={items.length}\n      // ref={pickerRef}\n      textInputProps={{\n        //@ts-ignore\n        fontSize: Fonts.size.regular - 1,\n        fontFamily: Fonts.TTCommons.regular,\n        maxFontSizeMultiplier: 1.1,\n        width: '95%',\n        color: textColor,\n        marginTop: -3,\n        ...customInputStyle,\n      }}\n      Icon={() => (RenderCustomIcon ? RenderCustomIcon() : <PickerIcon color={isEmptyOrNil(errorMessage) ? iconColor : Colors.error} />)}\n      // useNativeAndroidPickerStyle={false}\n      itemKey={value}\n      // onUpArrow={() => onUpdownArrowSelect('up')}\n      // onDownArrow={() => onUpdownArrowSelect()}\n      onValueChange={onValueChange}\n      onDonePress={onDonePress}\n      items={items}\n      disabled={isDisabled}\n      {...PickerOSSpecificProps}\n    />\n  );\n\n  return (\n    <>\n      {/* @ts-ignore */}\n      <TextInput\n        style={{ backgroundColor: Colors.white, ...textInputContainerStyle }}\n        ref={textInputRef}\n        theme={{\n          ...PICKER_THEME,\n          colors: {\n            primary: Colors.blue,\n            error: Colors.error,\n            disabled: Colors.disabled,\n            placeholder: pickerStateColor,\n            text: Colors.black,\n          },\n        }}\n        testID={testId}\n        accessibilityLabel={testId}\n        mode={pickerMode}\n        label={!isEmptyOrNil(value) ? label : ''}\n        value={!isEmptyOrNil(value) ? value : ''}\n        error={!isEmptyOrNil(errorMessage) ? true : false}\n        render={RenderPickerSelect}\n        {...textProps}\n      />\n      <If condition={!isDisabled && !isEmptyOrNil(errorMessage)}>\n        <Then>\n          <View\n            style={{\n              ...customErrorContainerStyle,\n            }}\n          >\n            <AppText kind=\"Error\" testID={`${testId}-error`} accessibilityLabel={`${testId}-error`}>\n              {errorMessage}\n            </AppText>\n          </View>\n        </Then>\n      </If>\n    </>\n  );\n};\n"],"file":"Picker.js"}