{"version":3,"sources":["../../src/components/AutoCompleteText.tsx"],"names":["isEmptyOrNil","Utilities","DependentContainer","View","Colors","white","props","lightBoxShadowGrey","APP_CONSTANTS","IS_ANDROID","borderRadius","AutoCompleteText","React","useState","query","setQuery","label","data","seeAllCallBack","clickableFieldCallBack","seeAllText","rest","filteredSearch","filter","_data","includes","value","height","map","element","paddingVertical","charcoalDarkGrey","blue","marginTop"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, TouchableOpacity, ScrollView } from 'react-native';\nimport { TextInput } from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/AntDesign';\nimport { If, Then, Else } from 'react-if';\nimport styled from 'styled-components/native';\nimport { propOr } from 'ramda';\n\nimport { APP_CONSTANTS, Colors, Utilities } from '../commons';\nimport { InputField } from './InputField';\nimport { AppText } from './AppText';\nimport { AddElementShadow, TransparentButtonsBorder } from './Styles';\nimport { AutoCompleteFieldProps } from './types';\n\nconst { isEmptyOrNil } = Utilities;\n\nexport const DependentContainer = styled(View)<{ marginBottom?: number }>`\n  padding-left: 20;\n  padding-right: 8;\n  padding-vertical: 12;\n  background-color: ${Colors.white};\n  margin-bottom: ${props => propOr(0, 'marginBottom')(props)};\n  border-color: ${Colors.lightBoxShadowGrey};\n  ${!APP_CONSTANTS.IS_ANDROID && TransparentButtonsBorder({ borderRadius: 6 })};\n  ${APP_CONSTANTS.IS_ANDROID && AddElementShadow()};\n`;\n\nexport const AutoCompleteText = (props: AutoCompleteFieldProps) => {\n  const [query, setQuery] = React.useState<string>('');\n  const { label, data, seeAllCallBack, clickableFieldCallBack, seeAllText = 'See all', ...rest } = props;\n  const filteredSearch = data.filter(_data => _data.includes(query));\n  return (\n    <View>\n      {/* @ts-ignore */}\n      <InputField label={label} value={query} onChangeHandler={value => setQuery(value)} rightIconComponent={() => <TextInput.Icon name={() => <Icon name={'caretdown'} />} {...rest} />} />\n      <If condition={!isEmptyOrNil(filteredSearch) && !isEmptyOrNil(query)}>\n        <Then>\n          <DependentContainer>\n            <ScrollView style={{ height: 180 }} nestedScrollEnabled={true}>\n              {filteredSearch.map((element: string) => (\n                <If condition={!isEmptyOrNil(clickableFieldCallBack)}>\n                  <Then>\n                    {/* @ts-ignore */}\n                    <TouchableOpacity style={{ paddingVertical: 8 }} onPress={() => clickableFieldCallBack(element)}>\n                      <AppText color={Colors.charcoalDarkGrey}>{element}</AppText>\n                    </TouchableOpacity>\n                  </Then>\n                  <Else>\n                    <View style={{ paddingVertical: 8 }}>\n                      <AppText color={Colors.charcoalDarkGrey}>{element}</AppText>\n                    </View>\n                  </Else>\n                </If>\n              ))}\n            </ScrollView>\n            <If condition={!isEmptyOrNil(seeAllCallBack)}>\n              {/* @ts-ignore */}\n              <TouchableOpacity style={{ paddingVertical: 8 }} onPress={() => seeAllCallBack(query)}>\n                <AppText\n                  color={Colors.blue}\n                  style={{\n                    marginTop: 10,\n                  }}\n                >\n                  {seeAllText}\n                </AppText>\n              </TouchableOpacity>\n            </If>\n          </DependentContainer>\n        </Then>\n      </If>\n    </View>\n  );\n};\n"],"file":"AutoCompleteText.js"}